#!/usr/bin/env python

import os

def get_current_runlevel(inittab_file):
    f = open(inittab_file,"r")
    for line in f:
        values = line.split(":")
        if len(values) == 4 and values[2]== 'initdefault':
            current_default = values[1]           
    
    f.close()
    return current_default

def change_inittab_runlevel(defaultrunlevel,inittab_file):
    new_default = defaultrunlevel

    f = open(inittab_file,"r")
    oldfile = f.readlines()
    f.close()

    newfile = []
    for line in oldfile:   
        values = line.split(":")
        newline = ""
        if len(values) == 4 and values[2]== 'initdefault':
            values[1]= new_default
            newline = ":".join(values)
            newfile.append(newline)
        else:
            newfile.append(line)
    
    f = open(inittab_file,"w")
    f.writelines(newfile)
    f.close

###########################################################################
#
def main():
    module = AnsibleModule(
        argument_spec = dict(
            #name=dict(required=True),
            defaultrunlevel=dict(required=True, choices=["2","3","4","5"]),
            inittabfile=dict(default="/etc/inittab"),
            #system=dict(default='no', choices=['yes', 'no']),
        )
    )
    
    defaultrunlevel = module.params['defaultrunlevel']
    if module.params.has_key('inittabfile'):
        inittabfile = module.params['inittabfile']
   
    if os.path.isfile(inittabfile):
        current_runlevel = get_current_runlevel(inittabfile)
        if current_runlevel != defaultrunlevel:
            change_inittab_runlevel(defaultrunlevel,inittabfile)
            module.exit_json(changed = True,
                            msg=inittabfile + " updated to default runlevel.")
        else: 
            module.exit_json(changed = False, results = "Default runlevel current.")
    else:
        module.exit_json(msg=inittabfile + " not found.")
        

# include magic from lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
main()
